buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'jacoco' // code coverage reporting

version = "0.1.6"
group = "generatormods" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.projectDir.name

minecraft {
    version = "1.7.10-10.13.0.1184"
    runDir = "eclipse/assets"
    replace '${version}', project.version
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(project.sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand([version:project.version, mcversion:project.minecraft.version])
    }

    // copy everything else, thats not mcmod.info
    from(project.sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }

    // copy licensing, documentation from the project base directory
    from(project.projectDir.getPath()) {
        include "*.md", "*.markdown", "*.txt"
    }

}

jar {
    //Keep the jar as clean as possible
    includeEmptyDirs = false

    //Append with minecraft version
    archiveName = archivesBaseName + "-" + minecraft.version + "-" + version + "." + extension
}

compileJava {
            //options.compilerArgs << "-Werror"
            options.compilerArgs << "-Xlint:deprecation"
            options.compilerArgs << "-Xlint:unchecked"
}

dependencies {
    testCompile 'junit:junit:4.11'
    testCompile "org.mockito:mockito-core:1.+"
}

test {
    useJUnit()
    testLogging {
        // Show that tests are run in the command-line output
        events 'started', 'passed'
    }
}
